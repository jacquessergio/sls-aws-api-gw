service: ${env:API_NAME, 'api-name'}
custom:
  environment: ${opt:environment, 'dev'} 
  file: file(./config/${self:custom.environment}.config.yml)
  resources: file(./resources/${env:API_NAME}.yml)
  stages:
    - gateway
provider:
  name: aws
  runtime: nodejs12.x
  endpointType:  ${${self:custom.file}:endpointType}
  vpcEndpointIds: ${${self:custom.file}:vpcEndpointIds}
  resourcePolicy: ${${self:custom.file}:resourcePolicy}
  stage: gateway
  timeout: 10
  region: ${${self:custom.file}:region}
  vpc: ${${self:custom.file}:vpc}
package:
  individually: true
  exclude:
     - ./**
     - ./src/lambda/**
     - ./src/lambda/**handler.ts
     - ./src/lambda/**package.json
  include:
     - ./src/lambda/**
functions:
  proxyFunction:
     name: '${self:service}-proxy'
     description: 'Function ${self:service}-proxy for backend layer integration'
     handler: ./src/lambda/Handler.proxy
     #disableLogs: true
     events: ${${self:custom.resources}:events}
plugins:
  - serverless-plugin-scripts
  - serverless-plugin-typescript
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-stage-manager
resources:
  Resources: ${file(./infrastructure/resources.yml)}
  Outputs:
    RestApiId:
        Value:
          Ref: ApiGatewayRestApi
        Export:
          Name: ${self:service}-RestApiId
    RootResourceId:
        Value:
          Fn::GetAtt: ApiGatewayRestApi.RootResourceId
        Export:
          Name: ${self:service}-RootResourceId
